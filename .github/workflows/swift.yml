name: Swift

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: macos-10.15
    timeout-minutes: 10
    strategy:
      matrix:
        include:
        - scheme: macOS
          sdk: "macosx11.1"
          destination: "platform=macOS"
          arch: x86_64
          swift_version: "5.3"
          action: test
          pod_lint: "YES"
        - scheme: iOS
          sdk: iphonesimulator
          destination: "platform=iOS Simulator,OS=14.4,name=iPhone 11"
          swift_version: "5.3"
          action: test
          pod_lint: "NO"
        - scheme: tvOS
          sdk: appletvsimulator
          destination: "platform=tvOS Simulator,OS=14.3,name=Apple TV 4K"
          swift_version: "5.3"
          action: test
          pod_lint: "NO"
        - scheme: watchOS
          sdk: watchsimulator
          destination: "platform=watchOS Simulator,name=Apple Watch Series 5 - 44mm"
          swift_version: "5.3"
          action: build
          pod_lint: "NO"
          
    env:
      LC_CTYPE: en_US.UTF-8
      LANG: en_US.UTF-8
      FRAMEWORK_NAME: "ReSwift-Thunk"       
       
    steps:
    - name: Checkout Project
      uses: actions/checkout@v2
    - name: Select Xcode
      uses: devbotsxyz/xcode-select@v1.1.0
      with:
        version: "12.4.0"
    - name: Show Build Settings
      run: xcodebuild -project ${{ env.FRAMEWORK_NAME }}.xcodeproj -scheme '${{ env.FRAMEWORK_NAME }} ${{ matrix.scheme }}' -showBuildSettings
    - name: Show Build SDK
      run: xcodebuild -project ${{ env.FRAMEWORK_NAME }}.xcodeproj -scheme '${{ env.FRAMEWORK_NAME }} ${{ matrix.scheme }}' -showsdks
    - name: Show Available Destinations
      run: xcodebuild -project ${{ env.FRAMEWORK_NAME }}.xcodeproj -scheme '${{ env.FRAMEWORK_NAME }} ${{ matrix.scheme }}' -showdestinations
    - name: Recover cached dependencies
      uses: actions/cache@v1
      id: dependency-cache
      with:
        path: Carthage
        key: ${{ runner.os }}-carthage-${{ hashFiles('**/Cartfile.resolved') }}
    - name: Carthage Bootstrap
      if: steps.dependency-cache.outputs.cache-hit != 'true'
      run: carthage bootstrap --no-use-binaries --use-xcframeworks --cache-builds
    - name: Build and Test
      run: |
        xcodebuild clean ${{ matrix.action }} \
          -destination "${{ matrix.destination }}" \
          -scheme "${{ env.FRAMEWORK_NAME }} ${{ matrix.scheme }}" \
          -sdk "${{ matrix.sdk }}" \
          -configuration Debug \
          -project "${{ env.FRAMEWORK_NAME }}.xcodeproj" \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          ONLY_ACTIVE_ARCH=YES \
          GCC_INSTRUMENT_PROGRAM_FLOW_ARCS=YES \
          GCC_GENERATE_TEST_COVERAGE_FILES=YES \
          SWIFT_VERSION=${{ matrix.swift_version }}

    - name: Lint If Needed
      if: matrix.pod_lint == 'YES'
      run: |
        gem install cocoapods -v '1.10.1'
        pod repo update
        pod lib lint --verbose --allow-warnings
